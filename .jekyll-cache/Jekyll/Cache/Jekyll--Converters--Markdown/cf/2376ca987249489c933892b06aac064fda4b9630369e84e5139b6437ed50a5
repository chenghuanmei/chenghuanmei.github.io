I">)<h2 id="前言">前言</h2>
<p>你不知道的JavaScript[上卷]主要分为两部分。第一部分是:作用域与闭包；第二部分是:this与对象原型。这里主要讲的是第一部分的第三章。<strong>函数作用域和块作用域</strong>。</p>

<h2 id="函数中作用域">函数中作用域</h2>
<p>我们知道，在任意代码外部添加包装函数，可以将内部的变量和函数定义“隐藏”起来。外部作用域无法访问包装函数内部的任何内容。
eg:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var a = 2;
function foo() { // &lt;-- 添加这一行
var a = 3; console.log( a ); // 3
} // &lt;-- 以及这一行 foo(); // &lt;-- 以及这一行
     console.log( a ); // 2
</code></pre></div></div>
<p>虽然这种技术解决了一些问题，但是它并不理想，因为它本身会导致一些额外的问题。首先，必须声明一个具名函数foo()，意味着foo 这个名称本身“污染”了所在作用域。其次，必须显式的通过函数名（foo()）调用这个函数才能运行其中的代码。</p>

<p>如果函数不需要函数名（或者至少函数名可以不污染所在作用域），并且能够自动运行，这将会更加理想。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(function foo(){ // &lt;-- 添加这一行 var a = 3;
console.log( a ); // 3 })(); // &lt;-- 以及这一行 console.log( a ); // 2
</code></pre></div></div>
<p>包装函数的声明（function… 而不仅是以 function… 开始。虽然这不是个明显的细节，但实际上非常重要。函数会被当作函数表达式而不是一个标准的函数声明来处理。</p>

<p>函数声明和函数表达式之间最重要的区别是它们的名称标识符将会绑定在何处。</p>

<p>比较一下前面两个代码段。第一个片段中foo被绑定在所在所用域中，可以直接通过foo() 来调用它。第二个片段中 foo 被绑定在函数表达式自身的函数中而不是所在作用域中。</p>

<p>换句话说，（function foo(){…}）作为函数表达式意味着 foo 只能在..所代表的位置中被访问，外部作用域则不行。foo 变量名被隐藏在自身中意味着不会非必要地污染外部作用域。</p>

<h4 id="匿名与具名">匿名与具名</h4>
<p>对于函数表达式你最熟悉的场景可能就是回调参数了。eg:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setTimeout(function(){
    console.log("I waited 1 second!")
},1000)
</code></pre></div></div>
<p>这叫作<strong>匿名函数表达式</strong>，因为function（）.. 没有名称标识符。函数表达式可以是匿名的，但是函数声明则不可以省略函数名 —— 在JavaScript的语法中这是非法的。</p>

<p>匿名函数表达式的缺点
1.匿名函数在栈追踪中不会显示出有意义的函数名，使得调试很困难。
2.如果没有函数名，当函数需要引用自身时只能使用已经过期的argument.callee引用，比如在递归中。另一个函数需要引用自身的例子，是在事件触发后事件监听器需要解绑自身。
3.匿名函数省略了对于代码可读性/可理解性很重要的函数名。</p>

<p>行内表达式非常强大有用 —— 匿名与具名之间的区别并不会对这点有任何影响。给函数表达式指定一个函数名可以有效解决以上问题。始终给函数表达式命名是一个最佳实践:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>setTimeout( 
    function timeoutHandler() { // &lt;-- 快看，我有名字了! 
    console.log( "I waited 1 second!" );
}, 1000 );

</code></pre></div></div>

<h4 id="立即执行函数表达式-iife">立即执行函数表达式 IIFE</h4>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var a = 2; 
(function IIFE() {
    var a = 3; console.log( a ); // 3
})();
console.log( a ); // 2
</code></pre></div></div>
<p>相较于传统对IIFE 形式，很多人都更喜欢另一种改进的形式: (function IIFE(){ .. }())。这两种形式在功能上是一致的。选择哪个全凭个人喜好。</p>

<p>IIFE 的另一个非常普遍的进阶用法就是把它们当作函数调用并传递参数进去。eg:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var a = 2;
(function IIFE( global ) {
    var a = 3;
    console.log( a ); // 3 
    console.log( global.a ); // 2
})( window );
console.log( a ); // 2
</code></pre></div></div>
<p>这个模式的对于改进代码风格是非常有帮助的。</p>

<p>这个模式的另外一个应用场景是解决undefeated标识符的默认值被错我覆盖导致的异常（虽然不常见）。将一个参数命名为undefeated，但是在对应的位置不传入任何值，这样就可以保证在代码块中undefeated标识符的值真的是undefeated:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>undefined = true; // 给其他代码挖了一个大坑!绝对不要这样做! 
(function IIFE( undefined ) {
    var a;
    if (a === undefined) {
        console.log( "Undefined is safe here!" );
    }
})();

</code></pre></div></div>

<p>IIFE 还有一种变化的用途是倒置代码运行顺序，将需要运行的函数放在第二位，在IIFE执行之后当作参数传递进去。这种模式在UMD项目中被广泛使用。</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var a = 2;
(function IIFE( def ) 
{ def( window );
})(function def( global ) {
var a = 3;
console.log( a ); // 3 console.log( global.a ); // 2
});
</code></pre></div></div>
<p>函数表达式def定义在片段的第二部分，然后当作参数（这个参数也叫做def）被传递进IIFE函数定义的第一部分中。最后参数def(也就是传递进去的函数)被调用，并将window传入当作global参数的值。</p>

<h2 id="块作用域">块作用域</h2>
<blockquote>
  <p>关键词：with,try/catch,let,const</p>
</blockquote>

<h4 id="let">let</h4>
<p>let 关键字可以将变量绑定到所在任意作用域中（通常是 {..} 内部）。换句话说，let为其声明的变量隐式地了所在作用域。</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var foo = true;
if(foo){ // &lt;-- 显示的块 
    let bar = foo*2;
    bar = something(bar);
    console.log(bar);
}
console.log(bar);// ReferenceError
</code></pre></div></div>
<p>在第4章，我们会讨论提升，提升是指声明会被视为存在于其所出现的作用域的整个范围内。
但是使用<code class="highlighter-rouge">let</code>进行的声明不会在块作用域中进行提升。声明的代码被运行之前，声明并不“存在”。</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
    console.log(bar) // ReferenceError!
    let bar = 2;
}
</code></pre></div></div>
<h6 id="垃圾收集">垃圾收集</h6>
<p>另一个块作用域非常有用的原因和闭包及回收内存垃圾的回收机制相关。</p>

<p>考虑以下代码：</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function process(data) {
// 在这里做点有趣的事情
}
var someReallyBigData = { .. };
process( someReallyBigData );
var btn = document.getElementById( "my_button" );
      btn.addEventListener( "click", function click(evt) {
          console.log("button clicked");
}, /*capturingPhase=*/false );
</code></pre></div></div>
<p>click 函数的点击回调并不需要 someReallyBigData 变量。理论上这意味着当 process（..）执行后，内存中占有大量空间的数据结构就可以被垃圾回收了。但是，由于click 函数形成了一个覆盖整个作用域的闭包，JavaScript引擎极有可能依然保存着这个结构（取决于具体实现）。</p>

<p>块作用域可以打消这种顾虑，可以让引擎清楚的知道没有必要继续保存 someReallyBigData 了:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>function process(data) {
// 在这里做点有趣的事情
}
// 在这个块中定义的内容可以销毁了! 
{
let someReallyBigData = { .. }; 
process( someReallyBigData );
}
var btn = document.getElementById( "my_button" );
     btn.addEventListener( "click", function click(evt){
         console.log("button clicked");
}, /*capturingPhase=*/false );
</code></pre></div></div>
<p>为变量显示声明块作用域，并对变量进行本地绑定是非常有用对工具。</p>

<h4 id="const">const</h4>
<p>除了<code class="highlighter-rouge">let</code>以外，ES6 还引入了 <code class="highlighter-rouge">const</code>，同样可以用来创建块作用域变量，但其值是固定的（常量）。之后任何试图修改值的操作都会引起错误。</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var foo = true;
if(foo){
    var a = 2;
    const b = 3;// 包含在if中块作用域常量

    a = 3; right!
    b = 4; error！
}
console.log( a ); // 3
console.log( b ); // ReferenceError!
</code></pre></div></div>
<h2 id="小结">小结</h2>
<p>函数是 JavaScript 中最常见的作用域单元。本质上，声明在一个函数内部的变量或函数会在所处的作用域中“隐藏”起来，这是有意为之的良好软件的设计原则。</p>

<p>但函数不是唯一的作用域单元。块作用域指的是变量和函数不仅可以属于所处的作用域，
也可以属于某个代码块(通常指 { .. } 内部)。</p>

<p>从 ES3 开始，try/catch 结构在 catch 分句中具有块作用域。</p>

<p>在 ES6 中引入了 let 关键字(var 关键字的表亲)，用来在任意代码块中声明变量。if (..) { let a = 2; } 会声明一个劫持了 if 的 { .. } 块的变量，并且将变量添加到这个块 中。</p>

<p>有些人认为块作用域不应该完全作为函数作用域的替代方案。两种功能应该同时存在，开 发者可以并且也应该根据需要选择使用何种作用域，创造可读、可维护的优良代码。</p>

<h3 id="参考">参考</h3>
<ul>
  <li><a href="https://kingyinliang.github.io/PDF/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%EF%BC%88%E4%B8%8A%E5%8D%B7%EF%BC%89.pdf">你不知道的JavaScript[上卷]</a></li>
</ul>
:ET